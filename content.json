{"meta":{"title":"左旭的博客","subtitle":"“技术、生活、读书分享”","description":"迈出的一小步","author":"左旭","url":"http://zuoxu91u.com"},"pages":[],"posts":[{"title":"设计中的设计","slug":"tags/bookList/设计中的设计","date":"2017-09-01T04:58:59.000Z","updated":"2017-09-03T14:12:40.000Z","comments":true,"path":"2017/09/01/tags/bookList/设计中的设计/","link":"","permalink":"http://zuoxu91u.com/2017/09/01/tags/bookList/设计中的设计/","excerpt":"","text":"作者 原研哉 (日) 实用主义和再设计性设计，是无印良品的核心卖点之一，因此有了一个专门的术语：“MUJI风”。这个词的出现就是对无印良品设计的一种肯定，我个人其实也很崇尚此道，本着成为“懂前端的里面设计水平最好的”的理解，平时对UI，UX也做了不少功课。这本书本身就是本逼格满满的存在，经常被各大论坛，某乎，某博提到，最近也拜读了一番，如果简单点说就是讲了两个概念：实用主义和再设计性。 大致讲了什么首先要说一个事情，读日本人写的东西和国内的路子不大一样；大学看了不少村上春树的作品，说是叙事风格有点怪吧，也不对。应该说，很平和，说着说着就把一个蛮重要的理论或者方法讲完了，没有引出，也没有高潮。原研哉在书中并没有，应该说一点也没有说到自己的“厉害”，首先谈了下包豪斯，包豪斯风格是现代设计绕不过去的话题，也是现代设计的开端。相比于之前的艺术设计，包豪斯更强调设计的实用性，并且实用的同时具有美感，在现在的数码产品中有一个经常被提到的词，“工业设计”，本身就是在体现这个含义。后边很自然而然的联系到MUJI的设计语言，总而言之应该是一种“实用而具有美感”的感觉，并且这个“感”，是由“五感”完成，在用户看到产品，感受产品，到最后的购买实用，“实用、美感”一直贯彻在产品当中。这本书的另一个部分，是在探讨用户到底想要什么。“以用户体验为中心”设计的产品，才可以在市场的得到推崇，MUJI在日本的定位很准确，大多数人承受的起的价格，良好的设计，不错的质量。然而到了中国确是“小资”的定位，不过事实上也受到了追捧，因为无印良品抓住了用户心理，“使用MUJI的产品代表了一种生活方式”，了解你的客户才能设计出好的产品。产品形象的树立不只是在一两件代表作上，从广告风格、门店装修到手袋的设计，其实到处都需要一种统一的设计语言，这一点现在很多国内的企业在学。 我的体会其实学到的干货并没有什么。设计的本质就是设计生活。小处着手，大处着眼。设计的物品应能达到“直指人心”。无论是简约的设计还是在设计中纯化元素，都是从人从感官（听觉、触觉、视觉等等）上去感受，最终能够让设计的东西感动人，让人舒服。这个达到用户情感化的点便是应该在设计时挖掘的。","categories":[],"tags":[{"name":"bookList","slug":"bookList","permalink":"http://zuoxu91u.com/tags/bookList/"}]},{"title":"参与感：小米口碑营销内部手册","slug":"tags/bookList/参与感：小米口碑营销内部手册 ","date":"2017-08-28T16:34:59.000Z","updated":"2017-09-02T15:40:33.000Z","comments":true,"path":"2017/08/29/tags/bookList/参与感：小米口碑营销内部手册 /","link":"","permalink":"http://zuoxu91u.com/2017/08/29/tags/bookList/参与感：小米口碑营销内部手册 /","excerpt":"","text":"作者 黎万强 互联网时代，产品是体验为王小米是一家永远处于风口的公司，从创立到如今一直是各种版块头条的常客，我现在家里也有很多小米的产品，个人的使用感受就是，“很懂得年轻人，或者叫做目标用户需要的是什么”，作为产品而言，可以做到这一点显然是成功的。小米的产品已经不再是当初的追求极度的性价比，同样的东西，在淘宝肯定可以找到类似甚至更便宜的，“出色的设计，优秀的品质，用户可以接受的价格”，最近也看了“MUJI”首席设计师原研哉的《设计中的设计》，突然觉得，小米有一种“中国的无印良品”的味道（这里网易严选显然是不同意的，不过严选和小米一些产品线和定价确实非常接近），不过无印良品在中国和在日本并不是同样的理解，这个我会在《设计中的设计》中说到。这个样子，结果是什么呢，反正对于我来说，对“小米”这个品牌已经产生了信任感，4月份搬家，各种买买买了几十件快递，像是电饭煲、路由、电视盒子甚至是电池都不加思素的选择了小米，这就是对一个品牌的认可吧，“即使不是最好的，那也是最好的选择之一”，这就是我的感觉。 大致讲了什么其实应该说是记录小米公司成长壮大的一部编年史，“参与感”这个词，不只是放在产品设计用户体验的阶段，而是可以理解为是小米企业文化的一部分。就说小米的第一个产品吧，“MIUI”。现在看来确实是有着革命性质的意义，这个产品包含了很多个在现在互联网行业十分流行而在当时却不为人待见的要素。“用户参与产品设计”和“敏捷开发”：MIUI会参考论坛中使用者的信息反馈，根据反馈结果制定系统开发计划，优化方向和处理bug，系统更新以周为单位，并在每周花固定的时间讨论这个周期的任务，这就是妥妥的敏捷开发嘛（spring backlog）,到了第一个硬件产品，也是革命意义的创新，首次在发布会上大谈硬件配置，甚至成本，要知道在之前个手机品牌对此都是支支吾吾，只说亮点，不说细节。 产品树立”产品第二，团队第一“，明确用户，让用户来激励团队 品牌”先做忠诚度再做知名度“，培养粉丝效应，互联网式的传播技巧 新媒体什么火就上什么 服务要好，要快，要到位，要超出用户期望 设计要有期待感、现场是检验设计唯一标准 总结小米是一家典型的互联网公司，”参与感”可以说是小米企业文化的核心之一，我觉得更难能可贵的是小米的创新精神：在营销模式、公司管理、售后等等，确实是一个又一个的”重新定义“。作为企业来说要学习这种创新精神，作为个人而言要具备将”参与感“贯彻到产品设计中的意识。","categories":[],"tags":[{"name":"bookList","slug":"bookList","permalink":"http://zuoxu91u.com/tags/bookList/"}]},{"title":"用户体验要素：以用户为中心的产品","slug":"tags/bookList/用户体验要素：以用户为中心的产品","date":"2017-08-22T15:34:59.000Z","updated":"2017-09-03T14:13:54.000Z","comments":true,"path":"2017/08/22/tags/bookList/用户体验要素：以用户为中心的产品/","link":"","permalink":"http://zuoxu91u.com/2017/08/22/tags/bookList/用户体验要素：以用户为中心的产品/","excerpt":"","text":"作者 Jesse James Garrett 用户体验，UX用户体验这东西，展开了说可以是一个专门的学科，这个词，经常被产品，销售，开发挂在嘴上，我也是如此：有些时候，和项目经理或领导对前端的展现效果出现分歧，怎么办咧，“这样子做用户体验会更好一些”，这可是一个杀手锏，不说百分百，十有八九是管用的；当然我确实在开发中挺注重用户体验的，但是之前并没有系统的研究过。第一次意识到要把用户体验放进UI设计中，应该是使用antDesign，其实那时候还没后来那么火了，不过如今各种UI库林林总总也用过七八个了，要是说设计理念靓不靓，文档写的好不好，首推还是它（由衷希望蚂蚁的团队也可以推个vue版）。不过那时候接触到的知识比较零散，“好像说的什么都对，不过总结起来，是什么呢？” 大致讲了什么这本书讲的蛮系统了，也是由浅入深，整本书首先就提出来“5层”的概念，在后边循序渐进的讲述：战略层：为什么要做这个产品？企业能得到什么好处——产品目标；用户得到什么好处——用户需求。我们的用户是谁？他们的需求是什么?【成果形态：战略文档，包括目标清单和用户调研报告】 范围层：我们应该为用户提供哪些功能和信息？不能为用户提供哪些功能和信息？定义需求，确定需求的优先级。【成果形态：PRD，主要指功能规格说明书】 结构层：这些功能和信息该如何组织到一起呢？他们之间都是什么关系？（并列、父子）功能尽量依托于某个概念模型，而且要应对好各种错误处理；信息的有效组织依赖于元数据。【成果形态：架构图】 框架层：这些层次关系比较清晰的功能和信息该如何在页面中布局？界面设计是选择正确的界面元素，导航设计是在告诉用户他们在哪儿，他们又可以去哪儿，信息设计是放置和排列信息的优先级。【成果形态：框架图】 表现层：关注视觉设计，决定这种安排在视觉上如何呈现。【成果形态：风格指南】 另外：产品的双重性：功能性和信息性成功的界面设计是让用户第一眼就能看到他们最想要的东西 总结建立良好的用户体验同样是一项非常系统化的工程，每一步都要细致合理，循序渐进。","categories":[],"tags":[{"name":"bookList","slug":"bookList","permalink":"http://zuoxu91u.com/tags/bookList/"}]},{"title":"学习敏捷 构建高效团队","slug":"tags/bookList/学习敏捷 构建高效团队","date":"2017-07-28T15:58:59.000Z","updated":"2017-09-03T03:30:40.000Z","comments":true,"path":"2017/07/28/tags/bookList/学习敏捷 构建高效团队/","link":"","permalink":"http://zuoxu91u.com/2017/07/28/tags/bookList/学习敏捷 构建高效团队/","excerpt":"","text":"作者 Jessa James Garrent (美) 学会敏捷看这本书是有出于工作的需要，最早听到这个词应该是今年4月份，夏总问“你们的开发模式是敏捷的么”，但是我还完全对这个没有概念，“敏捷就是开发速度更快吧”，那时候大致是这么想。后来和道云的做了新能源的项目，算是入了门，不过是属于“知其然而不知其所以然”，到了6月份，听到俞处说了什么“spring backlog”还是很蒙圈…不行，看看书好好学一下吧。 大致讲了什么敏捷开发应该可以分为两个体系：“spring backlog” 和“极限编程”，而二者并不是完全独立的，可以在一个项目中同时运用：“spring backlog”偏向于项目管理，“极限编程”偏向于开发的技巧。相比于瀑布流的开发模式，“spring”在组织结构和团队协作上边，也相似也有进步，总而言之就是比较去中心化，相比于开发人员对项目经理的言听计从，“spring”更强调全员参与，通过“站会”和“任务认领”的形式一方面增强技术人员对项目的参与感，使其可以更好地全身心投入项目，另一方面也是十分有必要的：项目经理着眼的是功能和战略层面，对具体功能实现的把我粒度并不能全面而到位，让技术人员自主的参与到功能的设计中也是对产品质量的保障有所帮助的；不过，”敏捷开发“的模式对”敏捷教练“的沟通协调能力，以及开发人员的综合素质确实要求会更高一些，想要最终实现敏捷，”多阶段开发，快速迭代“，这对于一个团队来说确实需要一个磨合的过程；以上是核心思想，为了实现敏捷并有效管理团队，借助一些工具显然是必要的，书中讲到了”燃尽图“，”结对编程“、”代码异味“等一些方法。 我的体会从7月开始，有两个交叉的项目在使用敏捷的方法实战，也是一个”学以致用“的过程吧，下边是我的总结： 对产品而言，开发只是一个阶段，在开始开发之前要有大量的工作去落实，比如目标用户的确定、用户需求的发掘、系统功能的梳理（必须十分清晰！），以上这些总得来说，就是产品经理的能力要过硬！ “参与感”，最近看的另外一本书中也在灌输这个概念，到了敏捷开发中对应着“集体承诺”，是将团队能力拉到更高台阶的重要手段。 执行力，方法其实不难理解，但是有效的执行才是成功的关键，比如每天要坚持的“站会”，比如开发对需求文档的贯彻，这些都需求不断的督导，不断的强调。只有认真落实每一步，才能“敏捷起来”。 通过两个项目，感觉确实“快”了，不过放在开发工程中，发现还有很多标准，规章需要确定，需要完善。","categories":[],"tags":[{"name":"bookList","slug":"bookList","permalink":"http://zuoxu91u.com/tags/bookList/"}]},{"title":"人人都是产品经理 2.0","slug":"tags/bookList/人人都是产品经理（下）","date":"2017-06-08T15:58:59.000Z","updated":"2017-08-27T11:25:53.000Z","comments":true,"path":"2017/06/08/tags/bookList/人人都是产品经理（下）/","link":"","permalink":"http://zuoxu91u.com/2017/06/08/tags/bookList/人人都是产品经理（下）/","excerpt":"","text":"作者 苏杰 更多的案例，广度而不是深度两本书从副标题就可以看出适度人群的区别：第一步本是写给“1-3岁的产品经理”，适合与刚从事和接触这个行业的新人，内容主要以方法和工具为主，第二本事“写给泛产品经理”，其实看这两本书的状态还比较相符，看第一本的时候，是参与了几个不算成功的小项目，认识到“产品经理”这个角色的重要性，而又苦于团队中并没有满足这一角色的人员。于是乎，我就作为一名前端开发往产品经理“兼职”了一把。第二次看，也就是现在，刚刚按照“套路”完成了那个项目，心中也是满满的感悟。 大致讲了什么这里有一个概念：“大产品经理”和“小产品经理”，我之前做的是小的，职责是从获得需求开始，到完成产品设计结束，而在此之外，还要大产品经理的概念，既从产品的战略选型，市场调研开始到产品发布、运营为止，对产品的整个生命周期负责。这本书就是一种”大产品经理“的概念，作者用了一个类似于旅游线路图的形式梳理了这个过程，并且将这些过程联系在一起，当然，对于不同的角色，对这个周期关心的内容是不尽相同的，然而作为产品经理，最核心的是为用户负责，”满足用户之所需，超出用户之所想“，不过对现实产品，”均衡“显得更贴切：广告太多了用户会厌烦，太少了影响收益；核心功能交互太复杂，会影响用户体验，太简单会不利于后期其他功能的推广。而且关注产品的整个生命周期显然十分必要，尤其是如今的互联网产品，相比于“发布一个尽善尽美的版本”还不如说“走一步，看一步”更切合实际。很多意见来自于市场团队，运营团队得到的反馈，如何筛选处有价值的内容，在以后的版本的发布，迭代才是制胜要点。 我的体会一个大产品经理无疑是一名优秀的“权衡者”，而小产品经理则偏向于“执行者”（纯属个人理解）","categories":[],"tags":[{"name":"bookList","slug":"bookList","permalink":"http://zuoxu91u.com/tags/bookList/"}]},{"title":"中国历代政治得失","slug":"tags/bookList/中国历代政治得失","date":"2017-06-08T15:58:59.000Z","updated":"2017-06-08T15:08:26.000Z","comments":true,"path":"2017/06/08/tags/bookList/中国历代政治得失/","link":"","permalink":"http://zuoxu91u.com/2017/06/08/tags/bookList/中国历代政治得失/","excerpt":"","text":"作者 钱穆 认真的读完了，一本历史书说到读过的讲历史方面的书，太多太多了。不过比较认真严肃的就少了，当然“严肃”的定义并不是统一的。《三国演义》应该是小说，算不上历史书，《明朝那些事》系统是把历史当成了小说来写，一本大众愿意读完的历史书，《袁腾飞说..》,《易中天评..》比较正统的讲完了历史。要说到以前读的与这本比较相似，应该是黄仁宇的《万历十五年》，那时候读起来还有些吃力，随着近几年思想的沉淀和知识的拓宽，钱穆老先生的名作认真拜读了。 大致讲了什么钱穆先生选取中国历史最具有代表性的几个朝代（汉、唐、宋、明、清），细说了各个朝代在官僚体制、人才用度、军事制度、税赋营收的各自特点和“得失”。书尾有总结，一下仅表述我的体会： 君权的不断强化，最近端午节看了一点“大秦帝国”，感受更加明显了。在战国时期的名士可以在各国之间出走，有的在多国拜相，大王举国而托付之；这种形式更类似于如今的高级经理人，而大王是各个“集团”的董事长。某个集团更换个“CEO”，如今是再稀松平常不过了。可是到了清朝，即使是内阁大学士，也只不过是”奴才“，要杀要换只是皇帝一句话的事。这么看可能觉得很突兀了，但是纵观历朝历代，这个演变的痕迹还是很显著的。”君权“、”相权“、”勋贵名门“、”士大夫集团“甚至后面加入的”宦官集团“，都在这一盘”权利的游戏“中相互厮杀，此消彼长。 中央集权，历史界崇尚汉唐，有一个很重要的方面就是后边的朝代在地方的发言权过小，中央政府一旦垮台，整个王朝即可倾倒，像是”安史之乱“，即使各个地方已经失去了中央的支持，面对盛唐的精锐边防军都可以耗上几年，为后边居于四川的李唐收复河山埋下了伏笔；到了宋朝也是，开封、临安早就丢了，还会有后边的”钓鱼城“和崖山，然而到了后边，遇到了二十万八旗或太平天国，确实一片摧枯拉朽。这与中央集权有很大关系的：地方把战略资源都给了中央，自身就羸弱了，总之各朝各代都是在强化君权，这就是副作用的一方面吧。 除了君王，其他阶级的差距逐步抹平。 我的体会看书也是一个举一反三的过程，知识是逐渐积累了，同样的内容对不同人，不同时期的我体会是不一样的。","categories":[],"tags":[{"name":"bookList","slug":"bookList","permalink":"http://zuoxu91u.com/tags/bookList/"}]},{"title":"人人都是产品经理（上）","slug":"tags/bookList/人人都是产品经理(上)","date":"2017-05-31T15:58:59.000Z","updated":"2017-06-08T15:01:47.000Z","comments":true,"path":"2017/05/31/tags/bookList/人人都是产品经理(上)/","link":"","permalink":"http://zuoxu91u.com/2017/05/31/tags/bookList/人人都是产品经理(上)/","excerpt":"","text":"作者 苏杰 一个，崭新的领域5月一直很忙，先是疯狂加班十来天，然后又是去上海出差了一周，读书的进度被耽误了。读产品方面的内容，一方面确实是处于工作需要，前端不知不觉就和需求打起了交道，想到去年第一次搞时序模型，做UC(use case)的一脸茫然，到了今年，才终于明白，原来一个团队中还少了一个灵魂人物–产品经理。就这样，其实在平时的工作里就默默的做了不少是PD（product design） 该做的活，既然做到了，就好好学下啦。 需求分析用户需求 vs 产品需求用户需求：用户自以为的需求，并且经常表达为用户的解决方案产品需求：经过我们的分析，找到的真实需求，并且表示为产品的解决方案需求分析：从用户提出的需求出发，找到用户内心真正的渴望，再转化为产品需求的过程。 需求的种类：1、分类 ：新增功能、功能改进、体验提升、Bug 修复、内部需求等2、层次：基础、扩展（期望需求）、增值（兴奋需求） kano模型从重要度、紧急度、持续时间评判得出商业优先级 性价比=商业价值/实现难度 做项目，终极目标就是：多快好省，即范围大、时间短、品质高、资源省。 BRD商业需求文档MRD 市场需求文档PRD 产品需求文档FSD 功能详细说明 产品实现的三重境界，“见山是山，见山不是山，见山还是山” 产品经理是做正确的事情，其所领导的产品是否复合市场需求，带来利润。最重要的是判断了和创造力。项目经理是把事情做正确，把事情做完美，在时间、成本、资源约束条件下完成目标。最重要的是执行力和控制力。 UC use case 用例文档 “设计流程的目标，是保证无论谁在用这个流程做产品的设计，都能够打到80分” 第一个层次： 本能水平的设计是基础，产品要有用第二个层次：行为水平的设计是保证，产品要好用第三个层次：反思水平的设计是升华，是难以捉摸的“用的爽”","categories":[],"tags":[{"name":"bookList","slug":"bookList","permalink":"http://zuoxu91u.com/tags/bookList/"}]},{"title":"知乎一小时（那些老师没讲到的知识点）","slug":"tags/bookList/知乎一小时（那些老师没讲到的知识点）","date":"2017-04-25T15:58:59.000Z","updated":"2017-05-31T05:58:15.000Z","comments":true,"path":"2017/04/25/tags/bookList/知乎一小时（那些老师没讲到的知识点）/","link":"","permalink":"http://zuoxu91u.com/2017/04/25/tags/bookList/知乎一小时（那些老师没讲到的知识点）/","excerpt":"","text":"作者 知乎出品一些开眼界的短篇叙确实有开眼界啊，一些在平时接触不到的知识，读起来还是蛮有意思的，有的是对科学的躺输，有的是真人亦事，最感兴趣的一篇是靠在家里的飘窗读的，一位国内的女性攀岩爱好者，通过这个故事一方面学到了不少专业的东西：“传统攀岩”、“运动攀岩”、“抱石”，技巧攀岩最难的有“5.14b级”，读过之后很想找个攀岩看下啊，然而后边就忙别的，这个先记下。另一方面，作者的经历十分励志，收益匪浅啊，身边这样纯粹有追求的人还是很少，能做到向她这样子其实相当不易，要克服现实的种种困境，更重要的是身边人一样的眼光，这都需要强大的内心啊，近几年经历了不少事情，更加由衷的钦佩和理解这些了。其他还有一些，数学界，音乐界，是我的认识有多了一块，总之，学到了挺多。","categories":[],"tags":[{"name":"bookList","slug":"bookList","permalink":"http://zuoxu91u.com/tags/bookList/"}]},{"title":"老人战争","slug":"tags/bookList/老人战争","date":"2017-04-23T12:38:49.000Z","updated":"2017-04-25T16:04:15.000Z","comments":true,"path":"2017/04/23/tags/bookList/老人战争/","link":"","permalink":"http://zuoxu91u.com/2017/04/23/tags/bookList/老人战争/","excerpt":"","text":"作者 约翰·斯卡尔齐 熟悉的故事，新的感悟&emsp;&emsp;其实这本书在西方很有名啊，拿了雨果奖，对！就是《三体》最近拿了的那个，读完这本书（准确说是第一部）后，个人得出的结论，《三体》可以获奖实至名归。&emsp;&emsp;还是要澄清一下，并不是说这本书不好，相反，对宏观宇宙的社会学，伦理学这些都很有建树。只不过故事有些熟悉–因为电影《阿凡达》。读了一半，发现二者重叠的痕迹很多：伤残军人vs75岁以上老人，强化基因战士（绿色）vs阿凡达（蓝色），同样是已经超现实的文明，太空旅行都是小菜一碟，然而还是依靠血肉之躯的士兵，以及与近代军队相似的作战方式。这里首先可以看出以下社会现实，电影的作者和编剧都是生活中19世纪中后期，处于美俄太空竞赛的背景下，在那个时代人类已经多次往返月球，然而彩色电视都没有在普通大众里普及。反观如今，美国还是美国，世界上唯一一个在月球插旗子的国家，然而，互联网颠覆了大众消费！现在每年新发布的手机，最喜欢用的是这个形容词，惊艳！因为只有做到这样，才可以吸引到消费者。谷歌已经预测，到了本世纪30年代，驾驶员这一职业将从社会消失。要是让我预测，再过100年，战争肯定由机器人来打，相信这个大家也不会有什么异议。好了，这方面的吐槽到此解锁。&emsp;&emsp;第二个方面了，就不得不提《三体》的高明，对多维宇宙，曲速引擎，纳米技术的描写惟妙惟肖。三体的背景里，三体人还在为打造亚光速飞行器而竭尽整个星球的资源，“老人”中的CFD舰队已经可以在不同星系穿来穿去，但是武器呢，还是“三体”中人类的水平，如果“水滴”遭遇了“幽灵部队”，想必是非常有趣的一幕。在此为刘大大点个赞！&emsp;&emsp;最后要说的，宇宙社会学，这个我站在“老人”这一边，不同物种，就我们而言就是人类和动物的区别，当然更有可能是反过来，我们对动物做的事，外星人对我们，完全没问题。很残酷啊！","categories":[],"tags":[{"name":"bookList","slug":"bookList","permalink":"http://zuoxu91u.com/tags/bookList/"}]},{"title":"基于WebSocket 的推送方法","slug":"tags/tech/基于WebSocket 的推送方法","date":"2017-04-16T12:27:21.000Z","updated":"2017-04-16T14:29:25.000Z","comments":true,"path":"2017/04/16/tags/tech/基于WebSocket 的推送方法/","link":"","permalink":"http://zuoxu91u.com/2017/04/16/tags/tech/基于WebSocket 的推送方法/","excerpt":"","text":"前言最近来了新的同事，我向他们介绍了下现有技术栈。然后自然是一遍又一遍的讲解，其中有一个问题：“你们的前后端间通讯的传输协议是什么的？”，我想都没想就回答：“ajax呀！，当然还可以用fetch或axios”，这样说好像没什么问题（然而并不是），如果还是刚工作时候的自己，应该会这么想的，可是现在都快工作一年了，那可不能再这样做。其实以上几种都属于http传输协议，今天就说下另一种：Webstock协议. 什么是WebstockWebSocket API是下一代客户端-服务器的异步通信方法。该通信取代了单个的TCP套接字，使用ws或wss协议，可用于任意的客户端和服务器程序。WebSocket目前由W3C进行标准化。WebSocket已经受到Firefox 4、Chrome 4、Opera 10.70以及Safari 5等浏览器的支持。 WebSocket API最伟大之处在于服务器和客户端可以在给定的时间范围内的任意时刻，相互推送信息。WebSocket并不限于以Ajax(或XHR)方式通信，因为Ajax技术需要客户端发起请求，而WebSocket服务器和客户端可以彼此相互推送信息；XHR受到域的限制，而WebSocket允许跨域通信。 Ajax技术很聪明的一点是没有设计要使用的方式。WebSocket为指定目标创建，用于双向推送消息。 怎么用？先去下插件啦，如果是node，用这个： 1npm install socket.io --save 具体写法是这样：1234567891011121314151617181920212223CODE:// 创建一个Socket实例var socket = new WebSocket(&apos;ws://localhost:8080&apos;); // 打开Socket socket.onopen = function(event) &#123; // 发送一个初始化消息 socket.send(&apos;I am the client and I\\&apos;m listening!&apos;); // 监听消息 socket.onmessage = function(event) &#123; console.log(&apos;Client received a message&apos;,event); &#125;; // 监听Socket的关闭 socket.onclose = function(event) &#123; console.log(&apos;Client notified socket has closed&apos;,event); &#125;; // 关闭Socket.... //socket.close() &#125;; 有什么特点其实和http协议很相似，亮点是他的主动性，因为是基于http协议而设计的，但是，不再是原来“一问一答”的形式，既每次前端发出请求，后端接受到请求之后再返回Response；而是具备了“广播”的特点，可以是前端来发起对话，也可以是服务器主动广播，直到前端接受到信息为止。如果比喻成谈朋友，http协议就是像是刚搭讪上，男的（前端）问一句，女的（Server）回答一句，有可能一不小心来个通讯中断（Bed request）,双方就不联系了。而webstocket是到了热恋中，妹子是很热情的，不用主动去聊，妹子总会有话题的，如果你敢长时间不回，电话就来啦！ 适用场景在线聊天、邮箱、看股票、实时监测等","categories":[],"tags":[{"name":"tech","slug":"tech","permalink":"http://zuoxu91u.com/tags/tech/"}]},{"title":"过日子要有技术含量","slug":"tags/bookList/过日子要有技术含量","date":"2017-04-15T13:58:59.000Z","updated":"2017-04-25T16:07:38.000Z","comments":true,"path":"2017/04/15/tags/bookList/过日子要有技术含量/","link":"","permalink":"http://zuoxu91u.com/2017/04/15/tags/bookList/过日子要有技术含量/","excerpt":"","text":"作者 果壳出品","categories":[],"tags":[{"name":"bookList","slug":"bookList","permalink":"http://zuoxu91u.com/tags/bookList/"}]},{"title":"前端框架—React与Vue的比较","slug":"tags/tech/前端框架—React与Vue的比较","date":"2017-04-12T14:46:21.000Z","updated":"2017-04-12T15:50:49.000Z","comments":true,"path":"2017/04/12/tags/tech/前端框架—React与Vue的比较/","link":"","permalink":"http://zuoxu91u.com/2017/04/12/tags/tech/前端框架—React与Vue的比较/","excerpt":"","text":"为什么写这篇文章使用React作为前端框架，是使我理解前端组件化、打包，并体会MVVM模型的起点，现在回想起来，那个过程是充实而又痛苦的：一大堆新概念一下子都甩到脸上，ES6语法竟然区别这么大！怎么什么都要Npm？Webpack…恩是这体系的基石。那段时间里，我发现自己好像完全不懂前端。从跑通第一个demo，到学会使用组件，最后可以使用框架完成项目，我对于MVVM的理解也在不断加深。到了后来学习Vue就轻松了很多，看API大致十天，用vue+vuex完成项目中一个功能花了一个星期，这自然是要归结于在学习react中积累的经验，想当初完成第一个功能模块，是整整两个月！现在这里说下个人观点，两者都很优秀，哪个玩转了都是棒棒哒；个人的话更细化Vue，主要是因为学习成本更低，上手更容易 本文作者也做了总结： 如果你喜欢用（或希望能够用）模板搭建应用，请使用Vue 如果你喜欢简单和“能用就行”的东西，请使用Vue 如果你的应用需要尽可能的小和快，请使用Vue 如果你计划构建一个大型应用程序，请使用React 如果你想要一个同时适用于Web端和原生App的框架，请选择React 如果你想要最大的生态圈，请使用React 如果你已经对其中一个用得满意了，就没有必要换了 以下是正文2016年，React在Web端和移动端都实现了迅速的成长，稳稳地领先于其主要竞争对手Augular，巩固了其作为前端框架之王的地位。 但是Vue在这一年里的表现也可谓同样的耀眼。Vue.js 2.0 的发布在整个JavaScript社区都引起了巨大反响，这一点仅从它在Github中涨了25,000颗star，就足以得到证明。 不得不说React和Vue的使用范围是相似的：都是基于组件化的轻量级框架，都专注于构建用户界面的视图层；都既可以用于简单的项目，也适用于使用前沿技术的大规模复杂项目。 因此，很多Web开发者都难免纠结到底要从中选择哪一个框架。这两者中能否分出个高下好坏？或者它们各自有哪些优缺点是需要我们注意的？还是说它们实际上差不多，用谁都一样？ 两种框架，两个拥护者 —- 摘自React 还是 Vue: 你应该选择哪一个Web前端框架？ 在这篇文章中我想用尽可能公平，全面的对比来回答这些疑问。但是问题来了：我是个不折不扣的Vue迷弟，肯定会偏向它。今年我在项目中大量地使用了Vue，在Medium上安利它的好处，甚至还在Udemy开设了一门关于Vue的入门课程。 为了平衡一下，我邀请了我的朋友Alexis Mangin一起参与讨论。他是一名优秀的Javascript开发者，且是React的铁粉。与我相似的是，他也频繁地在各种项目中（包括Web端和移动端项目）使用着React。 有一天他问我说：“为什么你这么喜欢用Vue，而不是React？”，当时由于我不太了解React，所以很难给出一个很好的回答。于是我向他提议，我们找一天带上各自的笔记本电脑，一起探讨我们各自喜爱的框架的好处。 Anthony（左）和 Alexis（右）在泰国清迈的Bull and Bear咖啡馆里比较React和Vue 经过大量地讨论和互相学习，我们得出了以下六个关键点： 如果你喜欢用（或希望能够用）模板搭建应用，请使用VueVue应用的默认选项是把markup放入HTML文件中。数据绑定表达式使用的是与Angular相似的双大括号（moustache）语法，而指令（特殊的HTML属性）则用于向模板中添加功能。 下面是一个简单的Vue应用示例。它会展示一条消息（message），和一个用来动态反转这条消息的按钮： 1234567891011121314151617181920212223// Html&lt;div id=&quot;app&quot;&gt; &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt; &lt;button v-on:click=&quot;reverseMessage&quot;&gt;Reverse Message&lt;/button&gt;&lt;/div&gt;// JSnew Vue(&#123; el: &apos;#app&apos;, data: &#123; message: &apos;Hello Vue.js! &#125;, methods: &#123; reverseMessage: function () &#123; this.message = this.message.split(&apos;&apos;).reverse().join(&apos;&apos;); &#125; &#125;&#125;); React应用则与之相反，不使用模板，而是要求开发者借助JSX在JavaScript中创建DOM。下面是用React实现的相同的应用： 12345678910111213141516171819202122232425262728293031// HTML&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;// JS (pre-transpilation)class App extends React.Component &#123; constructor(props) &#123; super(props); this.state = &#123; message: &apos;Hello React.js!&apos; &#125;; &#125; reverseMessage() &#123; this.setState(&#123; message: this.state.message.split(&apos;&apos;).reverse().join(&apos;&apos; ) &#125;); &#125; render() &#123; return ( &lt;div&gt; &lt;p&gt;&#123;this.state.message&#125;&lt;/p&gt; &lt;button onClick=&#123;() =&gt; this.reverseMessage()&#125;&gt; Reverse Message &lt;/button&gt; &lt;/div&gt; ) &#125;&#125; ReactDOM.render(App, document.getElementById(‘app’));对于来自标准Web开发的新开发者来说，模板更容易理解。然而甚至连一些资深的开发者也喜欢使用模板，因为模板能更好地把功能和布局分割开来，还为使用Pug之类的模板引擎提供了可能。 不过使用模板的代价在于你需要学习所有的HTML扩展语法，而渲染函数（render function）只要求会使用标准的HTML和JavaScript。而且比起模板，渲染函数更易于调试和测试。但是，你并不应该因此就错过Vue，因为在Vue2.0中已经提供了使用模板或者渲染函数的选项。 如果你喜欢简单和“能用就行”的东西，请使用Vue一个简单的Vue项目能不需要转译直接使用在浏览器中，这使得在项目中使用Vue可以像使用jQuery一样容易。当然这对于React来说在技术上也是可行的，但典型的React代码是更多地依赖于JSX和诸如class等ES6特性的。而Vue的简单则是更深层地源于其设计的。让我们来比较一下这两个框架是如何处理应用数据的（即“state”）： React里的状态（state）是不可变（immutable）的，因此你不能直接地改变它，而是要用setState API方法： 1234this.setState(&#123; message: this.state.message.split(&apos;&apos;).reverse().join(&apos;&apos;) &#125;); React是通过比较当前状态和前一个状态的区别来决定何时及如何重新渲染DOM的内容，因此需要使用不可变的状态。 而与此相反的是，Vue中的数据是可变的（mutated），所以同样的数据变量可以用简洁得多的方式修改： 123// Note that data properties are available as properties of // the Vue instancethis.message = this.message.split(&apos;&apos;).reverse().join(&apos;&apos;); 让我们来看看Vue中是如何对状态进行管理的：当你向状态中添加一个新对象时，Vue将遍历其中的所有属性并且将它们转换为getter，setter方法。于是Vue的响应系统开始保持对该状态的跟踪，当该状态的内容发生变化的时候就会自动重新渲染DOM。令人佩服的是，Vue中改变状态的操作不仅更加简洁，而且它的重新渲染系统实际上比React的更快更高效。 不过Vue的响应系统还是有些坑的，比如它无法检测属性的添加和删除，以及某些数组更改。这时候就要用Vue API中的类似于React的set方法的措施来解决。 如果你的应用需要尽可能的小和快，请使用Vue当应用程序的状态改变时，React和Vue都会构建一个虚拟DOM并同步到真实DOM中。两者都有它们各自的优化这个过程的方式。 Vue的核心开发者提供了一个benchmark测试，来表明Vue的渲染系统比React的更快，具体基准的设定以及同其他框架的比较详见vuejs.org。测试方法是将含有10000个项目的列表渲染100次，结果如下图。 从实用的角度来看，这种benchmark只跟边缘情况有关，而大部分应用程序中不会经常进行这种操作，所以这不应该被视作一个重要的比较点。但是，页面大小则是与所有项目有关的，这方面Vue又一次优于React，它目前的版本压缩后只有25.6KB。要用React实现同样的功能，你需要React DOM（37.4KB）和React with Addon库（11.4KB），共计44.8KB，几乎是Vue的两倍大。虽然从React你的确会得到更丰富的API，但双倍的体积并不能带来双倍的功能。 如果你计划构建一个大型应用程序，请使用React像文章开头那样，用Vue和React实现的简单应用程序来比较两者，可能会让一个开发者从一开始就更倾向于Vue。这是因为基于模板的应用程序乍看上去更易理解，而且能很快地写好并跑起来。但是这些最初的便利会引入技术债并阻碍应用扩展到更大的规模。模板容易出现难以注意到的运行时错误，同时也不易于测试，重构和分解。 相比之下，Javascript模板可以组织成经过良好分解，且使用DRY（don’t repeat yourself - 避免重复代码）原则的代码的组件，因而具有更强的可重用性和可测试性。Vue也有组件系统和渲染函数，但React的渲染系统可配置性更强，并包含如shallow rendering这样的特性，可结合React的测试工具一起使用，从而大为提高代码的可测试性及可维护性。 虽然React的不可变（immutable）应用状态写起来可能不够Vue简洁，但它在大型应用中仍会大放异彩，因为透明度和可测试性此时变得至关重要。 如果你想要一个同时适用于Web端和原生App的框架，请选择ReactReact Native是一个用于通过Javascript构建移动端原生应用程序的库。 它与React.js相同，只是不使用Web组件，而是使用原生组件。 如果你学过React.js，很快就能上手React Native，反之亦然。 12345678910111213141516// JSimport React, &#123; Component &#125; from &apos;react&apos;; import &#123; AppRegistry, Text, View &#125; from &apos;react-native&apos;;class HelloWorld extends Component &#123; render() &#123; return ( &lt;View&gt; &lt;Text&gt;Hello, React Native!&lt;/Text&gt; &lt;/View&gt; ); &#125;&#125;AppRegistry.registerComponent(&apos;HelloWorld&apos;, () =&gt; HelloWorld); 其意义在于，开发者只需要一套知识和工具就能开发Web应用和移动端原生应用。如果你想同时做Web端开发和移动端开发，学习React对你来说是相当划算的。 总结一下，我们发现， Vue的优势包括： 模板和渲染函数的弹性选择 简单的语法及项目创建 更快的渲染速度和更小的体积 React的优势包括： 更适用于大型应用和更好的可测试性 同时适用于Web端和原生App 更大的生态圈带来的更多支持和工具 而实际上，React和Vue都是非常优秀的框架，它们之间的相似之处多过不同之处，并且它们大部分最棒的功能是相通的： 他们的共同点： 利用虚拟DOM实现快速渲染 轻量级 响应式组件 服务器端渲染 易于集成路由工具，打包工具以及状态管理工具 优秀的支持和社区","categories":[],"tags":[{"name":"tech","slug":"tech","permalink":"http://zuoxu91u.com/tags/tech/"}]},{"title":"你不知道的JavaScript—笔记（二）","slug":"tags/tech/你不知道的JavaScript—笔记（二）","date":"2017-04-06T08:46:21.000Z","updated":"2017-04-05T14:47:37.000Z","comments":true,"path":"2017/04/06/tags/tech/你不知道的JavaScript—笔记（二）/","link":"","permalink":"http://zuoxu91u.com/2017/04/06/tags/tech/你不知道的JavaScript—笔记（二）/","excerpt":"","text":"关于这本书准确的说，我看到是“上”，现在“中”已经出版了，但是还没有中文版，看这书的热度，“下”肯定是会有的。这次笔记，我计划是按照书的“部分”划分来写：“上”包括四个部分：第一部分：作用域和闭包；第二部分：this和对象原型；第三部分：混合对象“类”和原型；第四部分：行为委托和其他 以下是第二部分为什么要用thisthis提供了一种优雅的方法传递对变量的应用，可以使api设计更简洁并更易于复用 对this的误解1、并不是指向自身2、this在任何情况下并不指向函数的语法作用域 什么是this“当一个函数被调用时，会创建一个活动记录（有时候也称为执行上下文）。这个记录会包含函数在哪里被调用（调用栈）、函数的调用方法、传入的参数等信息。this就是记录的其中一个属性，会在函数执行的过程中用到。” this的绑定 默认绑定使用声明在全局中的变量 隐式绑定“当函数引用有上下文对象时，隐式绑定规则会把函数调用中的this绑定到这个上下文对象。”“对象属性引用链中只有最顶层或者说最后一层会影响调用位置”“在非严格模式，隐式绑定对象会因为应用默认绑定而丢失” 显式绑定通过call()，apply()强制调用其他函数“可惜，显式绑定仍然无法解决我们之前提出的丢失绑定问题。 new绑定 “首先我们重新定义一下JavaScript中的“构造函数”。JavaScript，构造函数只是一些使用new操作符时被调用的函数。它们并不会属于某个类，也不会实例化一个类。” “使用new来调用函数，或者说发生构造函数调用时，会自动执行下面的操作。” 创建（或者说构造）一个全新的对象。 这个新对象会被执行[[原型]]连接。 这个新对象会绑定到函数调用的this。 如果函数没有返回其他对象，那么new表达式中的函数调用会自动返回这个新对象。” call方法:语法：call([thisObj[,arg1[, arg2[, [,.argN]]]]])定义：调用一个对象的一个方法，以另一个对象替换当前对象。说明：call 方法可以用来代替另一个对象调用一个方法。call 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。如果没有提供 thisObj 参数，那么 Global 对象被用作 thisObj。 apply方法： 语法： apply([thisObj[,argArray]]) 定义： 应用某一对象的一个方法，用另一个对象替换当前对象。 说明： 如果 argArray 不是一个有效的数组或者不是 arguments 对象，那么将导致一个 TypeError。 如果没有提供 argArray 和 thisObj 任何一个参数，那么 Global 对象将被用作 thisObj， 并且无法被传递任何参数。这两个方法基本上是一个意思，区别在于 call 的第二个参数可以是任意类型，而apply的第二个参数必须是数组，也可以是arguments 优先级 new&gt;显示&gt;隐式&gt;默认箭头函数的绑定无法被（call/apply）修改 “如果你经常编写this风格的代码，但是绝大部分时候都会使用self = this或者箭头函数来否定this机制，那你或许应当：当然，包含这两种代码风格的程序可以正常运行，但是在同一个函数或者同一个程序中混合使用这两种风格通常会使代码更难维护，并且可能也会更难编写。” 只使用词法作用域并完全抛弃错误this风格的代码； 完全采用this风格，在必要时使用bind(..)，尽量避免使用self = this和箭头函数。”空对象目的：防止误绑定到全局对象“var ø = Object.create( null );” 对象JavaScript的基本类型一共六种，包括：boolean，null，number，undefined, object, string对象可以通过两种方式定义：声明（文字）形式和构造形式。区别：文字声明可以一次添加多个键/值对，而构造需要逐个添加。 语法bug: typerof null时会返回字符串“object”，然而null也是基本类型 属性描述符 包含三种特性：可写、可枚举、可配置(修改属性)123456789Object.defineProperty(..) 添加、修改属性Object.getOwnPropertyDescriptor( myObject, &quot;a&quot; ); var myObject=&#123;&#125;;“Object.defineProperty( myObject, &quot;a&quot;, &#123; value: 2, writable: true, configurable: true, enumerable: true&#125; ); ” Enumerable可枚举，相当于可以出现在for的遍历中不变性 “当你给一个属性定义getter、setter或者两者都有时，这个属性会被定义为“访问描述符” 。对于访问描述符来说，JavaScript会忽略它的value和writable特性 存在性123456var myObject = &#123; a:2&#125;;(&quot;a&quot; in myObject); // true(&quot;b&quot; in myObject); // false 属性的特性可以通过属性描述符来控制，比如writable和configurable。此外，可以使用Object.preventExtensions(..)、Object.seal(..)和Object.freeze(..)来设置对象（及其属性）的不可变性级别。 遍历“可以使用ES6的for..of语法来遍历数据结构（数组、对象，等等）中的值，for..of会寻找内置或者自定义的@@iterator对象并调用它的next()方法来遍历数据值。”","categories":[],"tags":[{"name":"tech","slug":"tech","permalink":"http://zuoxu91u.com/tags/tech/"}]},{"title":"长安十二时辰","slug":"tags/bookList/长安十二时辰（全）","date":"2017-04-05T13:10:23.000Z","updated":"2017-04-05T13:20:20.000Z","comments":true,"path":"2017/04/05/tags/bookList/长安十二时辰（全）/","link":"","permalink":"http://zuoxu91u.com/2017/04/05/tags/bookList/长安十二时辰（全）/","excerpt":"","text":"作者 马伯庸 想要一口气读完的类型过年的时候，就在期待这部小说，趁着清明节终于读完了，小说分上下两册，应该算是中篇。小说内容就我的感受还是很有吸引力，大致看了十来个小时。 要说这个小说，必须先谈两个事情。著名美国反恐剧《24 hours》，我是铁杆粉，真的可以这么说，8季正剧（每季24集），1季完结篇（12集），还有一部番外电影，全看了！看第一季还是上初一，应该是我看的第一部真正意义上的美剧。由此发现了新世界，开启了对英美剧的转粉之路。以前初中放暑假的时候，看《24小时》是从早上看到半夜，除了去吃饭中途不干别的，真的是第一次对电视剧有这么大的魔性。这不小说可以就说是对24小时的致敬：靖安司就是CTU，负责反恐，隐于面下，但是可以调动巨大的资源，并人才济济：张小敬就是杰克鲍尔，一个是十年西域兵，九年不良帅，一个是三角洲部队成员，反恐行动负责人，并且两人对于家庭，国家，政治利益的看法充满了不谋而合。虽然相隔以前多年，如果把张小敬的弩机换成杰克的手枪，似乎两者的身影就重合在了一起。另一个是作者，“亲王”马伯庸，认识他是通过《古董局中局》，共4部。亲王对历史文化方面的深厚功力令我佩服，更让我佩服的是亲王对情节的掌控能力。不读到最后，永远猜不到真相到底是什么，由亲王来讲24小时的故事，也真的是再适合不过。所以，年前看到这部小说的时候就充满了期待，结果自然也是不负众望。 再聊聊小说小说的故事，简单的说就是唐代的反恐24小时。张小敬，这个本来已经打入监牢的死囚。一步步的在重重迷住之中抽丝剥茧，带着读者揭开了事实的真相，为了化解危机，必须具备当机立断的决心，以及细致入微的分析，当然作为主人公还有矫健的身手，才可以在危机之中杀出一条血路。最后的真相无意是令人意外的，然而当知道真相后，就如两位主人公的对话所说，似乎真相仅仅是一个答案，反而并不重要了；真的有可能若干年后再回想起这部小说，会忘记结局是什么。但是会记得那些尔虞我诈，人性的狡诈，以及政治的残酷。也许还会忘记张小敬这个名字，但是那个追求大义的无畏会在此记下。","categories":[],"tags":[{"name":"bookList","slug":"bookList","permalink":"http://zuoxu91u.com/tags/bookList/"}]},{"title":"血腥的盛唐","slug":"tags/bookList/血腥的盛唐","date":"2017-03-28T13:58:59.000Z","updated":"2017-09-03T13:44:54.000Z","comments":true,"path":"2017/03/28/tags/bookList/血腥的盛唐/","link":"","permalink":"http://zuoxu91u.com/2017/03/28/tags/bookList/血腥的盛唐/","excerpt":"","text":"作者 王觉仁这是一套书，共6本，我读完了2、3、4. 总结总而言之就是通俗易懂，主要是唐朝建立到盛唐对内和对外的战争。","categories":[],"tags":[{"name":"bookList","slug":"bookList","permalink":"http://zuoxu91u.com/tags/bookList/"}]},{"title":"你不知道的JavaScript—笔记（一）","slug":"tags/tech/你不知道的JavaScript—笔记（一）","date":"2017-03-26T08:46:21.000Z","updated":"2017-04-05T14:49:16.000Z","comments":true,"path":"2017/03/26/tags/tech/你不知道的JavaScript—笔记（一）/","link":"","permalink":"http://zuoxu91u.com/2017/03/26/tags/tech/你不知道的JavaScript—笔记（一）/","excerpt":"","text":"关于这本书准确的说，我看到是“上”，现在“中”已经出版了，但是还没有中文版，看这书的热度，“下”肯定是会有的。这次笔记，我计划是按照书的“部分”划分来写：“上”包括两个部分：第一部分：作用域和闭包；第二部分：this和对象原型；第三部分：混合对象“类”和原型；第四部分：行为委托和其他 先说下基础知识程序中一段源代码在执行之前会经历三个步骤，统称为“编译”。 分词/词法分析 解析/语法分析 代码生成 编译中的角色 引擎 从头到尾负责整个JavaScript程序的编译及执行过程。 编译器 引擎的好朋友之一，负责语法分析及代码生成等脏活累活（详见前一节的内容）。 作用域 引擎的另一位好朋友，负责收集并维护由所有声明的标识符（变量）组成的一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限。” RHS和LHS“RHS查询与简单地查找某个变量的值别无二致，而LHS查询则是试图找到变量的容器本身，从而可以对其赋值。” 引擎与作用域对话过程12345“function foo(a) &#123; var b = a; return a + b;&#125;var c = foo( 2 );” 引擎：作用域，我需要对foo进行RHS引用作用域： 编译器说foo是个函数，给你引擎 ：执行foo引擎：作用域，我需要对a进行LHS引用作用域: a 是foo中声明的形参，给你引擎：现在讲2赋值给a 作用域嵌套 当一个块或函数嵌套在另一个块或函数中时，就发生了作用域的嵌套。因此，在当前作用域中无法找到某个变量时，引擎就会在外层嵌套的作用域中继续查找，直到找到该变量，或抵达最外层的作用域（也就是全局作用域）为止” “JavaScript中的eval(..)函数可以接受一个字符串为参数，并将其中的内容视为好像在书写时就存在于程序中这个位置的代码。” 函数优先函数声明和变量声明都会被提升。但是一个值得注意的细节（这个细节可以出现在有多个“重复”声明的代码中）是函数会首先被提升，然后才是变量。 闭包“闭包是基于词法作用域书写代码时所产生的自然结果，你甚至不需要为了利用它们而有意识地创建闭包。闭包的创建和使用在你的代码中随处可见。你缺少的是根据你自己的意愿来识别、拥抱和影响闭包的思维环境。 “当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。” 提升 是现有声明后有赋值的； “函数声明和变量声明都会被提升。但是一个值得注意的细节（这个细节可以出现在有多个“重复”声明的代码中）是函数会首先被提升” var 和 letlet是es6新增的语法，相对于var,主要区别体现在作用域上，使用let令语法拥有创建块作用域的能力；而之前的var是共享作用域。 箭头函数“简单来说，箭头函数在涉及this绑定时的行为和普通函数的行为完全不一致。它放弃了所有普通this绑定的规则，取而代之的是用当前的词法作用域覆盖了this本来的值。”","categories":[],"tags":[{"name":"tech","slug":"tech","permalink":"http://zuoxu91u.com/tags/tech/"}]},{"title":"你不知道的JavaScript","slug":"tags/bookList/你不知道的JavaScript","date":"2017-03-26T05:32:20.000Z","updated":"2017-03-28T07:10:37.000Z","comments":true,"path":"2017/03/26/tags/bookList/你不知道的JavaScript/","link":"","permalink":"http://zuoxu91u.com/2017/03/26/tags/bookList/你不知道的JavaScript/","excerpt":"","text":"[美国] Kyle Simpson 大致上，在伯乐在线上看到的推荐，号称2016必看的前端书籍，然后就入了，Kindle和Mac交叉攻读中…..既然这么推荐了，自然好是好书，特别是对于我这个种半吊子，基础极不扎实的新手。最近上拉钩、Bose直聘，还有听知乎Live，看相关的专栏，也有一些体会。现在这个阶段，一定得夯实基础。从去年十月专职写前端代码，首先是学会用框架，先把程序跑起来；然后是深究函数，换着花样的整数据，当然顺便对Css是运用水平也提高不少。最近开始关注结构性的东西，怎么开发组件、自动化文档生成、打包工具的配置。既然是好书，那必须细读了，笔记和总结另外写在了《技术》栏下。","categories":[],"tags":[{"name":"bookList","slug":"bookList","permalink":"http://zuoxu91u.com/tags/bookList/"}]},{"title":"Live-诺贝尔经济学奖得主：特朗普上台，中国该往何处去 笔记","slug":"tags/feel/诺贝尔经济学奖得主：特朗普上台，中国该往何处去-笔记","date":"2017-03-22T13:56:45.000Z","updated":"2017-03-26T08:44:41.000Z","comments":true,"path":"2017/03/22/tags/feel/诺贝尔经济学奖得主：特朗普上台，中国该往何处去-笔记/","link":"","permalink":"http://zuoxu91u.com/2017/03/22/tags/feel/诺贝尔经济学奖得主：特朗普上台，中国该往何处去-笔记/","excerpt":"","text":"Live 时间： 北京时间 3月21日 Live 主讲人：JosephE.Stiglitz（美国经济学家，诺贝尔经济学奖，诺贝尔和平奖获得者） Live 话题： 特朗普上台，中国该往何处去Live大约一小时多一点，提问很踊跃，貌似提问者主要是中国所谓的精英阶级（企业高管、知名大V）和各路求知进步青年，貌似不少是研习经济学的同学。教授对该问题的回答我觉得比较中肯，主要集中在川普的“新保护主义”。以下是对Live的笔记 关于全球化、自由贸易其本质，是做出资源的最佳分配和利用。通过信息共享和打破贸易壁垒，使“物美价廉”令全球收益，这里涵盖商品的原材、制造，以及信息、服务产业。例如中东向世界其他地区输出石油，中国以及东南亚的工业产品，美国的高科技，都是各个领域的在世界范围内的最佳选择（既保有最高性价比）。全球化绝对是一个多边收益的结果，教授说到，经济学家绝不会单独去看双边贸易顺（逆）差，而是通过多边贸易去衡量，就比如美国本土制造IPhone,虽然与中国的贸易逆差会减少，但是制造IPhone需要从其他国家进口诸多元器件以及原材料（而这些的产地也在东亚），最终的结果一方面肯定是IPhone成本上涨，另一方面，其涉及到的多面贸易顺（逆）差就不好判断了。最坏的结果，被摧毁的工作岗位数量远远超过了被创造的工作岗位数量。 就像我之前说的，全球化通过允许每个国家利用自己的比较优势、专业化地做自己相对最有优势的事情使得生活水平得到提升。我们一旦放弃全球化或者说开始逆全球化，这个模式就被彻底摧毁了，同时，重构世界经济的新秩序是一件代价不菲的事情。 逆全球化的社会问题川普在选举中一系列承诺，其目标自然是改善国民现状。 比如，如果我们考察一个典型的美国男性，刨除通货膨胀因素，美国男性劳工的中位数收入比四十二年前还要低。在（利益分配格局的）最底部的美国人的平均工资，刨除通货膨胀因素，与大约六十年前在同一水平。很难想象这样一种对于这个国家如此大比例的人的经济停滞，我们只能说，“美国式的资本主义”对于大部分美国人来说并不奏效。 社会发展的瓶颈是每一个国家都必须面对，而又畏惧的问题。另一方面来说，虽然很多人说中国政府是“一切向GDP看齐”，然而国内现在可以保持整体格局稳定（作为一个发展中国家而言），特别是在一二线城市拥有在世界上比较靠前的治安水平，GDP的稳定且快速增长是很重要的一方面，它确保广大群众有个“盼头”，并提供了不俗的就业岗位数量（失业率对影响社会稳定非常可怕）。然而，“逆全球化”是一种不治本的举措,其传递的给个人信号是这样的：我不需要进步，维持现状就好。 由于美国的产业结构已经是资本密集型了，所以即使工作岗位向美国回流，经济需要的是一些拥有与现在不同技能的劳工，同时，也不会有那么多工作岗位。所以，最终的净结果是，新保护主义政策事实上不会挽救美国丢失的那些工作机会，那些为特朗普投票期待他能做到这一点的人一定会失望。 关于中国在外边的人看来，中国的进步是巨大的，30年人均GDP翻了8倍，但是要贯彻好科学啊。 我所希望的是中国能够提高增长的质量、保护好环境、做好城市管理","categories":[],"tags":[{"name":"feel","slug":"feel","permalink":"http://zuoxu91u.com/tags/feel/"}]},{"title":"移动web适配利器-rem","slug":"tags/tech/移动web适配利器-rem","date":"2017-03-20T13:45:21.000Z","updated":"2017-03-21T01:45:20.000Z","comments":true,"path":"2017/03/20/tags/tech/移动web适配利器-rem/","link":"","permalink":"http://zuoxu91u.com/2017/03/20/tags/tech/移动web适配利器-rem/","excerpt":"","text":"前言提到rem，大家首先会想到的是em，px，pt这类的词语，大多数人眼中这些单位是用于设置字体的大小的，没错这的确是用来设置字体大小的，但是对于rem来说它可以用来做移动端的响应式适配哦。 兼容性 先看看兼容性，关于移动端 ios：6.1系统以上都支持 android：2.1系统以上都支持 大部分主流浏览器都支持，可以安心的往下看了。## rem设置字体大小* rem是（font size of the root element），官方解释 意思就是根据网页的根元素来设置字体大小，和em（font size of the element）的区别是，em是根据其父元素的字体大小来设置，而rem是根据网页的跟元素（html）来设置字体大小的，举一个简单的例子， 现在大部分浏览器IE9+，Firefox、Chrome、Safari、Opera ，如果我们不修改相关的字体配置，都是默认显示font-size是16px即123html &#123; font-size:16px;&#125; 那么如果我们想给一个P标签设置12px的字体大小那么用rem来写就是123p &#123; font-size: 0.75rem; //12÷16=0.75（rem）&#125; 基本上使用rem这个单位来设置字体大小基本上是这个套路，好处是假如用户自己修改了浏览器的默认字体大小，那么使用rem时就可以根据用户的调整的大小来显示了。 但是rem不仅可以适用于字体，同样可以用于width height margin这些样式的单位。下面来具体说一下 rem进行屏幕适配在讲rem屏幕适配之前，先说一下一般做移动端适配的方法，一般可以分为： 简单一点的页面，一般高度直接设置成固定值，宽度一般撑满整个屏幕。 稍复杂一些的是利用百分比设置元素的大小来进行适配，或者利用flex等css去设置一些需要定制的宽度。 再复杂一些的响应式页面，需要利用css3的media query属性来进行适配，大致思路是根据屏幕不同大小，来设置对应的css样式。 上面的一些方法，其实也可以解决屏幕适配等问题，但是既然出来的rem这个新东西，也一定能兼顾到这些方面，下面具体使用rem： rem适配 先看一个简单的例子： 12345678.con &#123; width: 10rem; height: 10rem; background-color: red; &#125;&lt;div class=&quot;con&quot;&gt; &lt;/div&gt; 这是一个div，宽度和高度都用rem来设置了，在浏览器里面是这样显示的， 可以看到，在浏览器里面width和height分别是160px，正好是16px * 10,那么如果将html根元素的默认font-size修改一下呢？1234567891011html &#123; font-size: 17px;&#125;.con &#123; width: 10rem; height: 10rem; background-color: red;&#125;&lt;div class=&quot;con&quot;&gt;&lt;/div&gt;再来看看结果： 这时width和height都是170px，这就说明了将rem应用与width和height时，同样适用rem的特性，根据根元素的font-size值来改变自身的值，由此我们应该可以联想到我们可以给html设定不同的值，从而达到我们css样式中的适配效果。 rem数值计算如果利用rem来设置css的值，一般要通过一层计算才行，比如如果要设置一个长宽为100px的div，那么就需要计算出100px对应的rem值是 100 / 16 =6.25rem，这在我们写css中，其实算比较繁琐的一步操作了。 对于没有使用sass的工程：为了方便起见，可以将html的font-size设置成100px，这样在写单位时，直接将数值除以100在加上rem的单位就可以了。 对于使用sass的工程：前端构建中，完全可以利用scss来解决这个问题，例如我们可以写一个scss的function px2rem即： 1234@function px2rem($px)&#123; $rem : 37.5px; @return ($px/$rem) + rem;&#125; 这样，当我们写具体数值的时候就可以写成：12height: px2rem(90px);width: px2rem(90px);; 看到这里，你可能会发现一些不理解的地方，就是上面那个rem:37.5px是怎么来的，正常情况下不是默认的16px么，这个其实就是页面的基准值，和html的font-size有关。 rem基准值计算关于rem的基准值，也就是上面那个37.5px其实是根据我们所拿到的视觉稿来决定的，主要有以下几点原因： 由于我们所写出的页面是要在不同的屏幕大小设备上运行的 所以我们在写样式的时候必须要先以一个确定的屏幕来作为参考，这个就由我们拿到的视觉稿来定 假如我们拿到的视觉稿是以iphone6的屏幕为基准设计的 iPhone6的屏幕大小是375px， 1rem = window.innerWidth / 10 这样计算出来的rem基准值就是37.5（iphone6的视觉稿），这里为什么要除以10呢，其实这个值是随便定义的,因为不想让html的font-size太大，当然也可以选择不除，只要在后面动态js计算时保证一样的值就可以，在这里列举一下其他手机的 iphone3gs: 320px / 10 = 32px iphone4/5: 320px / 10 = 32px iphone6: 375px / 10 =37.5px 动态设置html的font-size 现在关键问题来了，我们该如何通过不同的屏幕去动态设置html的font-size呢，这里一般分为两种办法 1 利用css的media query来设置即123@media (min-device-width : 375px) and (max-device-width : 667px) and (-webkit-min-device-pixel-ratio : 2)&#123; html&#123;font-size: 37.5px;&#125;&#125; 2 利用javascript来动态设置 根据我们之前算出的基准值，我们可以利用js动态算出当前屏幕所适配的font-size即：1document.getElementsByTagName(&apos;html&apos;)[0].style.fontSize = window.innerWidth / 10 + &apos;px&apos;; 然后我们看一下之前那个demo展示的效果1234567891011.con &#123; width: px2rem(200px); height: px2rem(200px); background-color: red;&#125;&lt;div class=&quot;con&quot;&gt; &lt;/div&gt;document.addEventListener(&apos;DOMContentLoaded&apos;, function(e) &#123; document.getElementsByTagName(&apos;html&apos;)[0].style.fontSize = window.innerWidth / 10 + &apos;px&apos;;&#125;, false); iPhone6下，正常显示200px 在iphone4下，显示169px由此可见我们可以通过设置不同的html基础值来达到在不同页面适配的目的，当然在使用js来设置时，需要绑定页面的resize事件来达到变化时更新html的font-size。###### rem适配进阶我们知道，一般我们获取到的视觉稿大部分是iphone6的，所以我们看到的尺寸一般是双倍大小的，在使用rem之前，我们一般会自觉的将标注/2，其实这也并无道理，但是当我们配合rem使用时，完全可以按照视觉稿上的尺寸来设置。1. 设计给的稿子双倍的原因是iphone6这种屏幕属于高清屏，也即是设备像素比(device pixel ratio)dpr比较大，所以显示的像素较为清晰。2. 一般手机的dpr是1，iphone4，iphone5这种高清屏是2，iphone6s plus这种高清屏是3，可以通过js的window.devicePixelRatio获取到当前设备的dpr，所以iphone6给的视觉稿大小是（*2）750×1334了。3. 拿到了dpr之后，我们就可以在viewport meta头里，取消让浏览器自动缩放页面，而自己去设置viewport的content例如（这里之所以要设置viewport是因为我们要实现border1px的效果，加入我给border设置了1px，在scale的影响下，高清屏中就会显示成0.5px的效果）1meta.setAttribute(&apos;content&apos;, &apos;initial-scale=&apos; + 1/dpr + &apos;, maximum-scale=&apos; + 1/dpr + &apos;, minimum-scale=&apos; + 1/dpr + &apos;, user-scalable=no&apos;);4. 设置完之后配合rem，修改1234 @function px2rem($px)&#123; $rem : 75px; @return ($px/$rem) + rem;&#125;双倍75，这样就可以完全按照视觉稿上的尺寸来了。不用在/2了，这样做的好处是：1. 解决了图片高清问题。2. 解决了border 1px问题（我们设置的1px，在iphone上，由于viewport的scale是0.5，所以就自然缩放成0.5px）在iphone6下的例子：我们使用动态设置viewport，在iphone6下，scale会被设置成1/2即0.5，其他手机是1/1即1.1meta.setAttribute(&apos;content&apos;, &apos;initial-scale=&apos; + 1/dpr + &apos;, maximum-scale=&apos; + 1/dpr + &apos;, minimum-scale=&apos; + 1/dpr + &apos;, user-scalable=no&apos;);我们的css代码，注意这里设置了1px的边框123456.con &#123; margin-top: 200px; width: 5.3rem; height: 5.3rem; border-top:1px solid #000; &#125;在iphone6下的显示：在android下的显示：","categories":[],"tags":[{"name":"tech","slug":"tech","permalink":"http://zuoxu91u.com/tags/tech/"}]},{"title":"前端第一讲，关于CSS中那些单位","slug":"tags/tech/前端第一讲，关于CSS中那些单位","date":"2017-03-19T13:44:21.000Z","updated":"2017-03-19T14:01:05.000Z","comments":true,"path":"2017/03/19/tags/tech/前端第一讲，关于CSS中那些单位/","link":"","permalink":"http://zuoxu91u.com/2017/03/19/tags/tech/前端第一讲，关于CSS中那些单位/","excerpt":"","text":"说到css的单位，大家应该首先想到的是px,也就是像素，我们在网页布局中一般都是用px，但是近年来自适应网页布局越来越多，em和百分比也经常用到了。然后随着手机的流行，web app和hybrid app的开发，都用到了css3技术，在css3中，新增了许多单位，rem、vw和vh、vmin和vmax、ch和ex等等，那现在对这些单位分别做一下详细的介绍吧。 1、em做前端的应该对em不陌生，不是什么罕见的单位，是相对单位， 这种技术需要一个参考点，一般都是以的“font-size”为基准。比如说我们使用“1em”等于“10px”来改变默认值“1em=16px”，这样一来，我们设置字体大小相当于“14px”时，只需要将其值设置为“1.4em”。前端开发的前辈们总结了一个经验 123body &#123; font-size: 62.5%; &#125; 那么，这样之后 1em = 10px 在布局等使用的时候好换算了很多。 2、百分比百分比相信大家更不会陌生了，百分比一般宽泛的讲是相对于父元素，但是并不是十分准确。 1、对于普通定位元素就是我们理解的父元素 2、对于position: absolute;的元素是相对于已定位的父元素（offset parent） 3、对于position: fixed;的元素是相对于 ViewPort viewport：可视窗口，也就是浏览器的window那么大。 例外情况 1、使用了padding、margin 等，实际百分比和你想要的百分比是有区别的。（关于这个，解决方法之一，就是我们可以使用css3的calc()属性，具体，您请继续往下看，在文章最后我会解释。） 2、line-height百分比的一些情况，通常结果是百分比 计算后的值。（关于这个，您请继续往下看。。。） 3、remrem是相对于根元素的“font-size”为基准。比如说我们给html设置font-size为100px， 那么我们要给html中的p标签设置16px的字体，font-size设置.16rem就可以，在这里16px=.16rem。 这个单位与em有什么区别呢？ 区别在于使用rem为元素设定字体大小时，仍然是相对大小，但相对的只是HTML根元素。这个单位可谓集相对大小和绝对大小的优点于一身，通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。目前，除了IE8及更早版本外，所有浏览器均已支持rem。对于不支持它的浏览器，应对方法也很简单，就是多写一个绝对单位的声明。这些浏览器会忽略用rem设定的字体大小。 rem支持IE9及以上，意思是相对于根元素html（网页），不会像em那样，依赖于父元素的字体大小，而造成混乱。使用起来安全了很多。123html &#123;font-size: 62.5%; /**10 ÷ 16 × 100% = 62.5% 1rem = 10px **/&#125; body &#123;font-size: 1.4rem; /**1.4 × 10px = 14px **/&#125;h1 &#123; font-size: 2.4rem; /**2.4 × 10px = 24px**/&#125; 这样整个网页都会比较统一！不会造成混乱！ 4、vh 和 vwIE10＋ 和现代浏览器都支持这两个单位。 vw Viewport宽度， 1vw 等于viewport宽度的1% vh Viewport高度， 1vh 等于viewport高的的1% vw和vh会随着viewport变化自动变化，再也不用js控制全屏了。 甚至有些人丧心病狂的字体大小都用vw和vh控制，来达到字体和viewport大小同步的效果。 5、vmin和vmaxIE10+ 和现代浏览器都已经支持vmin webkit浏览器之前不支持vmax，新版已经支持，所有现代浏览器已经支持，但是IE 全部 不支持vmax vmin vw和vh中比较小的值 vmax vw和vh中比较大的值 这两个属性也会随着viewport变化 6、ch和exIE9+ 和现代浏览器都已经支持,这两个单位时根据 当前font-family 的相对单位。 ch:字符0的宽度 sex:小写字符x的高度 当font-family改变的时候这两个单位的值也会变化，不同字体表现的样式不一样。 第二部分移动H5开发入门知识：CSS3的新单位算法 A、css3的calc()。上面我们已经提到了calc()，下面我们就具体说一说吧！ 浏览器支持IE9+、FF4.0+、Chrome19+、Safari6+ calc()语法非常简单，就像我们小时候学加 （+）、减（-）、乘（*）、除（/）一样，使用数学表达式来表示：123.haorooms &#123; width: calc(expression);&#125; 这样padding和margin和百分比一起用，问题就可以解决了。 例如，我们margin是20px。那么我们就可以写成123.haorooms&#123; width: calc(100% - 20px); //注：减号前后要有空格，否则很可能不生效！！&#125; 也可以这么用：12345678910 .box &#123; background: #f60; height: 50px; padding: 10px; border: 5px solid green; width: 90%;/*写给不支持calc()的浏览器*/ width:-moz-calc(100% - (10px + 5px) * 2); width:-webkit-calc(100% - (10px + 5px) * 2); width: calc(100% - (10px + 5px) * 2);&#125; B、line-height百分比line-height百分比在面试中可能经常问到。例如你知道line-height:120%和line-height:1.2的区别吗？ 现在就说一下行高带单位和不带单位的区别，例如下面的例子： line-height:26px; 表示行高为26个像素 line-heigth:120%;表示行高为当前字体大小的120% line-height:2.6em; 表示行高为当前字体大小的2.6倍带单位的行高都有继承性，其子元素继承的是计算值，如父元素的字体大小为14px，定义行高line-height:2em;则计算值为 28px，不会因其子元素改变字体尺寸而改变行高。(例如：父元素14px，子元素12px,那么行高就是28px，子元素虽然字体是12，行高还是父元素的行高) line-height:2.6;表示行高为当前字体大小的2.6倍不带单位的行高是直接继承，而不是计算值，如父元素字体尺寸为14px，行高line-height:2;他的行高为28px;子元素尺寸为12px，不需要再定义行高，他默认的行高为24px。（例如：子元素12px，他的行高是24,不会继承父元素的28） 希望以上的这些移动H5开发入门知识点，对各位的H5前端开发学习有一定的帮助.","categories":[],"tags":[{"name":"tech","slug":"tech","permalink":"http://zuoxu91u.com/tags/tech/"}]},{"title":"寄语","slug":"tags/bookList/寄语","date":"2017-03-16T13:58:59.000Z","updated":"2017-03-16T16:06:55.000Z","comments":true,"path":"2017/03/16/tags/bookList/寄语/","link":"","permalink":"http://zuoxu91u.com/2017/03/16/tags/bookList/寄语/","excerpt":"","text":"关于书单&emsp;&emsp;在大学以及研究生的这些年，我看了几百本书，这是一件一直挺骄傲的事。&emsp;&emsp;我自认为是一个喜欢看书的人，从小就有这个习惯，还在上小学的时候，从“十万个为什么”，到“少儿百科全书”，让我对这个世界有了不同于其他孩子的认识；到后来，作为一个理科生却对历史和文化有着深厚的兴趣（这应该就是高中成绩不好的主要因素之一）；等呼吸到大学里，那自由而又散漫的空气，更是一发不可收拾：学校图书馆里面各个朝代的历史书都读了一遍自然不在话下，古代世界历史、德国史、日本战国史、美国近代史都略有涉及。到了高年级，也许是由于阅历的增长，对经济和政治类的书籍也起了兴趣。当然作为一个热血青年，各类中外小说也是涉猎不少。&emsp;&emsp;要说到所获，溢于言表。知识量、世界观、价值观，这是我的总结。忽然想起知乎的一个讨论：读书早晚会忘，为什么还要读书？,在此就不想多说了，如果能做到，自然能体会那量变到质变的历程。 写书单的意义&emsp;&emsp;如今工作了大半年，客观言之相比于学校，生活节奏确实快了很多，前四个月的时间都没有看完一本书。从12月下旬开始，我下定决心，要重新恢复我的读书计划，并以此为由入手kindle一枚。并在此借开设博客之机，将自己的阅读体会分享一下（其实主要是为了监督自己多读书啦）。 计划&emsp;&emsp;每个月看不少于8本（最低目标），现在应该是技术类和社科类的夹杂，当然还有感兴趣的小说。我平时会把体会先记在印象笔记，并定期在此进行commit。","categories":[],"tags":[{"name":"bookList","slug":"bookList","permalink":"http://zuoxu91u.com/tags/bookList/"}]},{"title":"新的征途开始了！","slug":"新的征途开始了！","date":"2017-03-15T12:45:59.000Z","updated":"2017-03-15T13:43:40.000Z","comments":true,"path":"2017/03/15/新的征途开始了！/","link":"","permalink":"http://zuoxu91u.com/2017/03/15/新的征途开始了！/","excerpt":"","text":"纪念一下，我的第一篇博客&emsp;&emsp;2017年3月，从17年7月正式工作开始，已经过了半年有余。&emsp;&emsp;毫无疑问，这半年多收获是巨大的，全新的环境带来了诸多机遇和挑战：技术、心智、情感 ；通过半年多的努力，我已经从一名崭新的发亮的IT行业新人，逐渐成为一名普通新人，哈哈。&emsp;&emsp;回想起去年9月份，刚刚完成新人入职培训，接触第一个J2EE项目，以及后面第一次要独立完成开发任务的过程，得到的感悟是兴奋而又充满着心酸：此前在读研期间做过一些类ERP项目，并动手写过不少前端代码，在各种复杂背景交织之下还未朦胧无知的学弟学妹门带了一学期的编程课（大写的汗颜）。直至此时，才让我可以心平气和、充满惭愧的坦诚面对：我真的很菜！。原来，调试工具这么好用，以前找个bug一两天真是够蠢；原来svn和git工具这么重要（这么爽），看到gitlab堆满彩色小方块，下边一行行的 commit by zuoxu 时惬意无比。想要成为一名优秀的程序员，或者说是一名优秀的人来说，足够的知识、良好的方法、正确的心态，这些都同样的重要。 作为一名前端工程师，怎么能没有自己的网站呢？&emsp;&emsp;可惜自己能力和精力还十分有限。就先用开设博客的方式来练下手吧，同时也是为了督促自己养成良好的习惯，在此把在工作、学习、生活中的感悟都在此记录下来。&emsp;&emsp;2017-03-15，新的征途就此开始吧！let’go!","categories":[],"tags":[]},{"title":"未来简史","slug":"tags/bookList/未来简史","date":"2017-03-12T13:58:59.000Z","updated":"2017-03-16T16:09:56.000Z","comments":true,"path":"2017/03/12/tags/bookList/未来简史/","link":"","permalink":"http://zuoxu91u.com/2017/03/12/tags/bookList/未来简史/","excerpt":"","text":"作者 尤瓦尔·赫拉利（以色列）&emsp;&emsp;开始的部分和人类简史有些重合 第一部分讲述人类如何征服世界&emsp;&emsp;自然界有一套法则，智人设计出一套新的社会意识形态，老的形态在与其它物种的竞争中不断扩大优势，新的心态反过来推翻老的心态。总而言之，规律是人制定的，去合理利用，并不为过。 第二部分，高级社会形态的本质&emsp;&emsp;是顺应时代和科技的发展，做到，各尽其用，各取所需。 第三部分，才是最终的从智人到智神，&emsp;&emsp;其实如今社会的很多现状都能看出端倪，很多就业岗位，已经不再是为了满足社会发展的需要，而仅仅是为了解决就业，维护社会稳定。人与人，穷人与富人，社会精英与普通市井之间的差别，正在通过一些新的方式被再一次放大。","categories":[],"tags":[{"name":"bookList","slug":"bookList","permalink":"http://zuoxu91u.com/tags/bookList/"}]},{"title":"Web全栈工程师的自我修养","slug":"tags/bookList/Web全栈工程师的自我修养","date":"2017-03-10T13:58:59.000Z","updated":"2017-03-16T16:10:30.000Z","comments":true,"path":"2017/03/10/tags/bookList/Web全栈工程师的自我修养/","link":"","permalink":"http://zuoxu91u.com/2017/03/10/tags/bookList/Web全栈工程师的自我修养/","excerpt":"","text":"作者 余果（就职于鹅厂） 强烈推荐！！！&emsp;&emsp;关于互联网，技术向的书很少见到这么切真务实的。作者从自己在大学时候学习，到找工作的过程、到做项目的经历，以及从事新人招聘的过程说起。仿佛作者就是身边一位优秀的学长，看完书后，收获太多太多。对我自己的职业规划、技术路线、以及需要注意的习惯都再度刷新。&emsp;&emsp;很接地气的一本书！","categories":[],"tags":[{"name":"bookList","slug":"bookList","permalink":"http://zuoxu91u.com/tags/bookList/"}]},{"title":"上海王","slug":"tags/bookList/上海王","date":"2017-02-25T13:58:59.000Z","updated":"2017-03-17T12:34:33.000Z","comments":true,"path":"2017/02/25/tags/bookList/上海王/","link":"","permalink":"http://zuoxu91u.com/2017/02/25/tags/bookList/上海王/","excerpt":"","text":"作者 虹影 聊胜于无&emsp;&emsp;蛮通俗的小说，看过之后才知道其先后改编了电影和电视剧。&emsp;&emsp;总体而言，叙事还是不错的。情节紧凑而又跌宕。不过最终没有耐心去看完，了解了下后边的故事，有时间也行再继续看下。&emsp;&emsp;在此值得一说的，倒是作者，她是一名海外华文作家。与严歌苓，加拿大的张翎，并称海外华文文学三剑客，以前严歌苓的作品倒是度过不少，她们都有些共同之处：作品中的女性人物，往往坚强并富有想法，男性人物反而埋没在其光辉之下；并且男性比较标签化，或大气、或贪婪。个人倒是比较欣赏其书中的诸多女性，看来我应算是个主张男女平等的。","categories":[],"tags":[{"name":"bookList","slug":"bookList","permalink":"http://zuoxu91u.com/tags/bookList/"}]},{"title":"你一生的故事","slug":"tags/bookList/你一生的故事","date":"2017-02-15T13:58:59.000Z","updated":"2017-03-17T13:02:38.000Z","comments":true,"path":"2017/02/15/tags/bookList/你一生的故事/","link":"","permalink":"http://zuoxu91u.com/2017/02/15/tags/bookList/你一生的故事/","excerpt":"","text":"作者 特德·蒋 需要费些心去读的&emsp;&emsp;国内当代名家的随笔精选集&emsp;&emsp;第一篇同名小说改编成了电影《降临》，全新的视角，出色的想象力，戏剧性的结局，看了小说之后又去看了电影，二者都不错。&emsp;&emsp;第二篇巴别塔重塑了巴比伦神话故事，小时候听过这个故事，这一次深刻的重读了：人们花费终生去寻找的天堂之门，最终的结果可能是又一次来到起点。&emsp;&emsp;《领悟》描写了人类智力发展到极致时的所思所想，以及这种超级智慧的终极目的。 科幻中参透着哲学，一口气读完不太可能，每次可以读一篇。&emsp;&emsp;再感慨一下，自己的思维深度还不够呀，说实话读的不透。","categories":[],"tags":[{"name":"bookList","slug":"bookList","permalink":"http://zuoxu91u.com/tags/bookList/"}]},{"title":"这个世界是有趣的","slug":"tags/bookList/这个世界是有趣的","date":"2017-02-12T13:58:59.000Z","updated":"2017-03-17T13:03:48.000Z","comments":true,"path":"2017/02/12/tags/bookList/这个世界是有趣的/","link":"","permalink":"http://zuoxu91u.com/2017/02/12/tags/bookList/这个世界是有趣的/","excerpt":"","text":"主 编：刘明清,孟波 充满温暖的一个下午&emsp;&emsp;是小说集，主要收录作者的主要短篇小说作品&emsp;&emsp;阅读门槛蛮低呀，有时间都可以看下。有意思的故事挺多的，文章或温文尔雅，或妙语连珠、或犀利独大。不经意间，却可以感受到大家们对待生活、对待世事的不羁心态。&emsp;&emsp;感觉上还有些像高雅版的鱼羊野史，夹杂着对人生和社会的感悟，了解到一些新东西。大概花了四五个小时看完. 无论发生好的、不好的事情我们都可以用一种超然的态度去审视这个世界。","categories":[],"tags":[{"name":"bookList","slug":"bookList","permalink":"http://zuoxu91u.com/tags/bookList/"}]},{"title":"硅谷钢铁侠","slug":"tags/bookList/硅谷钢铁侠","date":"2017-02-08T13:58:59.000Z","updated":"2017-03-19T15:08:09.000Z","comments":true,"path":"2017/02/08/tags/bookList/硅谷钢铁侠/","link":"","permalink":"http://zuoxu91u.com/2017/02/08/tags/bookList/硅谷钢铁侠/","excerpt":"","text":"作者 阿什利·万斯 直接上感悟吧，作为同是热爱科技的宅男&emsp;&emsp;Mr马斯克，膜拜一个！&emsp;&emsp;思考:结合刘慈欣的科幻小说，也有同感，虽然也是做IT行业的，不过也认同这种观点，人类的基本问题在于解决能源，疾病的问题，并在人工智能、生命科学领域等进行突破。社会应该投入很多财力物力在这上边。现在互联网行业汇聚了最聪明的大脑是事实，因为互联网商业化价值大，获利速度快。然而对人类的发展，帮助有限。我个人认为最伟大的是物理学，特别是基础科学，一点点突然就意味着人类社会的巨大飞跃。 伟大的人，需要眼光、执行力、才能和足够的偏执。","categories":[],"tags":[{"name":"bookList","slug":"bookList","permalink":"http://zuoxu91u.com/tags/bookList/"}]},{"title":"2.5次世界大战","slug":"tags/bookList/2.5次世界大战 刘慈欣","date":"2017-02-05T13:58:59.000Z","updated":"2017-03-19T14:02:13.000Z","comments":true,"path":"2017/02/05/tags/bookList/2.5次世界大战 刘慈欣/","link":"","permalink":"http://zuoxu91u.com/2017/02/05/tags/bookList/2.5次世界大战 刘慈欣/","excerpt":"","text":"作者 刘慈欣 首先声明，科幻和悬疑（盗墓）是我最喜欢的小说类型&emsp;&emsp;还记得是研二，在几趟高铁上刷完了三体，许久没有的兴奋&emsp;&emsp;短篇小说集，对刘的作品更进一步接触，最近很喜欢这类型作品，基于硬科学。小故事都对于人类的未来，以及宇宙的本质进行了遐想。最后一个长故事（2.5次世界大战本体）更是精彩，并且构思缜密，刘总的故事总是有无限的创意、真是读不完。 思考：在人工智能面前，人类何用，还是一如既往，一个无解的问题。","categories":[],"tags":[{"name":"bookList","slug":"bookList","permalink":"http://zuoxu91u.com/tags/bookList/"}]},{"title":"人类简史","slug":"tags/bookList/人类简史","date":"2017-01-21T13:58:59.000Z","updated":"2017-03-19T15:05:02.000Z","comments":true,"path":"2017/01/21/tags/bookList/人类简史/","link":"","permalink":"http://zuoxu91u.com/2017/01/21/tags/bookList/人类简史/","excerpt":"","text":"作者 尤瓦尔·赫拉利（以色列）&emsp;&emsp;毫无疑问，2017年第一本读着有冲击力的著作 这本书应该说是用心看了，从年前看到快上班，保持进度的看了十天左右。从第一章开始，作者就给我们倡导了一条新的路线，其书名曰“简史”，然而绝对不能归为历史书，甚至是社科人文著作。作者从一种理性的视角，分析了“人类学”。 总结如下 永生开始是平等的，人，智人在经历过一次次自然选择后最终胜出，终于成为了凌驾于众生的存在，人的伦理道德，价值观，社会观，都是在这个过程中形成。 对社会意识形态进步的论述，应该算是全新的视角；对于人性的解释，真实而又残酷。 对大航海，科学发现大爆炸等的因果解释的很到位，对人类未来的走势有预测，期待未来简史。 感悟：&emsp;&emsp;从小就是历史类的书籍有独特的兴趣，不过近几年发生了不小的变化：以前喜欢的是历史中的故事，帝王将相，杀伐征战，总会有支持的一方。而如今却对通过历史事件反应的社会本质更感兴趣，这也算是一种质变吧。","categories":[],"tags":[{"name":"bookList","slug":"bookList","permalink":"http://zuoxu91u.com/tags/bookList/"}]}]}